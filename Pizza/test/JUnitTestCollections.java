import java.lang.reflect.Field;import java.time.LocalDate;import java.time.LocalDateTime;import java.util.ArrayList;import java.util.Arrays;import org.junit.BeforeClass;import org.junit.Test;import de.thb.fim.pizzaPronto.datenobjekte.GerichtVO;import de.thb.fim.pizzaPronto.datenobjekte.Geschlecht;import de.thb.fim.pizzaPronto.datenobjekte.KundeVO;import de.thb.fim.pizzaPronto.datenobjekte.PizzaVO;import de.thb.fim.pizzaPronto.datenobjekte.SpeiseKarte;import de.thb.fim.pizzaPronto.logik.Angestellter;import de.thb.fim.pizzaPronto.logik.Bestellung;import de.thb.fim.pizzaPronto.logik.Koch;import de.thb.fim.pizzaPronto.logik.Lieferant;import de.thb.fim.pizzaPronto.logik.exceptions.BestellungFalscherStatusException;import de.thb.fim.pizzaPronto.logik.exceptions.KeinKundeException;import de.thb.fim.pizzaPronto.logik.exceptions.KeineBestellungException;import static org.junit.Assert.*;/** * Angestellte und arbeiten wird getestet. *  * Voraussetzung Bestellung und Speisekarte sind ok *  * Zum Testen werden spezielle Assert-Befehle eingesetzt <br> *  * @author Gabriele Schmidt * @version 1.0 11.05.2015 */public class JUnitTestCollections {	private static Class<Bestellung> myBestellungClass;	private static Class<SpeiseKarte> mySpeisekarteClass;	private static Class<GerichtVO> myGerichtVOClass;	private static Bestellung myBestellung;	private static Angestellter[] angestellte = new Angestellter[2];	private static KundeVO kunde;	private static SpeiseKarte speisekarte;	private static Field warenkorb;		private static Field speisen;		private static Field zutaten;	@BeforeClass	public static void setUpBeforeClass() throws Exception {		// Koch erstellen		angestellte[0] = new Koch("Bocuse", "Bruno", "Schlemmerweg", 13,				"Koch007");		// Lieferant erstellen		angestellte[1] = new Lieferant("Rasender", "Rudi", "Schnellstraße",				200, "Lieferant01");		// Kunde		kunde = new KundeVO("Genuss", "Gini", "Haribostraße", 32, Geschlecht.W,				LocalDate.of(1995, 8, 8), null);		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		speisekarte = new SpeiseKarte();		myBestellungClass = Bestellung.class;		warenkorb = myBestellungClass.getDeclaredField("warenkorb");				mySpeisekarteClass = SpeiseKarte.class;		speisen = mySpeisekarteClass.getDeclaredField("speisen");				myGerichtVOClass = GerichtVO.class;		zutaten = myGerichtVOClass.getDeclaredField("zutaten");	}	@Test	public void testBestellungWarenkorbLinkedList() {		assertEquals("Warenkorb in Bestellung ist LinkedList mit  GerichtVO", "private java.util.LinkedList de.thb.fim.pizzaPronto.logik.Bestellung.warenkorb",warenkorb.toString());	}		@Test	public void testBestellungWarenkorbLinkedListGerichtVO() {		assertTrue("Warenkorb in Bestellung ist LinkedList und vom Typ GerichtVO",				warenkorb.getGenericType().toString().equals("java.util.LinkedList<de.thb.fim.pizzaPronto.datenobjekte.GerichtVO>"));							}		@Test	public void testSpeiseKarteSpeisenArrayList() {		assertEquals("Speisen in SpeiseKarte ist ArrayList", "private java.util.ArrayList de.thb.fim.pizzaPronto.datenobjekte.SpeiseKarte.speisen",speisen.toString());	}					@Test	public void testSpeisenDatentypSpeiseKarte() {		assertTrue("Speisen in SpeiseKarte ist ArrayList", speisen.getType().toString().equals("class java.util.ArrayList"));	}	@Test	public void testSpeisenDatentypGenericSpeiseKarte() {		assertTrue("Speisen in SpeiseKarte ist ArrayList und vom Typ GerichtVO", speisen.getGenericType().toString().equals("java.util.ArrayList<de.thb.fim.pizzaPronto.datenobjekte.GerichtVO>"));	}		@Test	public void testGerichtVOZutatenArrayList() {			assertTrue("Zutaten in GerichtVO ist ArrayList ist ArrayList",				zutaten.toString().equals("protected java.util.ArrayList de.thb.fim.pizzaPronto.datenobjekte.GerichtVO.zutaten"));							}		@Test	public void testGerichtVOZutatenStringArrayList() {		assertEquals("Zutaten in GerichtVO ist ArrayList mit String", "java.util.ArrayList<java.lang.String>",zutaten.getGenericType().toString());	}	@Test	public void testBestellungStatusAufgegeben() {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		assertEquals("Bestellungsstatus nach Objekterzeugung ist aufgegeben",				"aufgegeben", myBestellung.getStatus());	}	@Test	public void testBestellungHinzufuegenGericht() {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		// Ein Gericht der Speisekarte hinzufügen		myBestellung.hinzufuegenGericht(speisekarte.getGericht(0));		assertEquals("Anzahl der Gerichte in Bestellung: 1", 1,				myBestellung.getAnzGerichte());	}	public void testLoescheNULLBestellung() {						Bestellung mylocalBestellung = new Bestellung(LocalDateTime.now().minusHours(9),null);					mylocalBestellung.loescheGericht(null);			}		@Test	public void testBestellungberechenGesamtPreis() {		float preis = 7.00f;		final int anz = 23;		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		ArrayList<String> zutaten;		zutaten = new ArrayList<String>(Arrays.asList(new String[] {				"Schinken", "Spinat", "Champignon", "Ei" }));		// Alle 18 Gerichte der Speisekarte hinzufügen		for (int i = 0; i < anz; i++) {			myBestellung.hinzufuegenGericht(new PizzaVO(30, "Popeye",					zutaten,					preis, 1));		}		assertTrue("Gesamtpreis wird korrekt berechnet ",				preis * anz == myBestellung						.berechneGesamtPreis());	}	@Test	public void testBestellungloescheGericht() {			myBestellung = new Bestellung(LocalDateTime.now(), kunde);		myBestellung.hinzufuegenGericht(speisekarte.getGericht(0));		myBestellung.loescheGericht(speisekarte.getGericht(0));		assertFalse(				"Nach Methode loescheGericht() in Bestellung ist Index erniedrigt",				myBestellung.getWarenkorb().contains(speisekarte.getGericht(0)));	}		@Test(expected = KeineBestellungException.class)	public void testAngestellteArbeitenFuerOhneBestellung() throws KeinKundeException, KeineBestellungException, BestellungFalscherStatusException {		assertTrue(				"ArbeitenFuer Koch: Keine Bestellung vorhanden",				angestellte[0].arbeitetFuerKunde(kunde).contains(						"Keine Bestellung vorhanden"));		assertTrue(				"ArbeitenFuer Lieferant: Keine Bestellung vorhanden",				angestellte[1].arbeitetFuerKunde(kunde).contains(						"Keine Bestellung vorhanden"));	}	@Test(expected = BestellungFalscherStatusException.class)	public void testAngestellteArbeitenFuerPersonalnummer() throws KeinKundeException, KeineBestellungException, BestellungFalscherStatusException {		assertTrue(				"ArbeitenFuer Koch: Personalnummer in Ausgabe",				angestellte[0].arbeitetFuerKunde(kunde).contains(						angestellte[0].getPersonalNummer()));		assertTrue(				"ArbeitenFuer Lieferant: Personalnummer in Ausgabe",				angestellte[1].arbeitetFuerKunde(kunde).contains(						angestellte[1].getPersonalNummer()));	}	@Test(expected = KeinKundeException.class)	public void testAngestellteArbeitenFuerOhneKunde() throws KeinKundeException, KeineBestellungException, BestellungFalscherStatusException {		assertTrue(				"ArbeitenFuer ohne Kunde Koch: Keine Bestellung vorhanden",				angestellte[0].arbeitetFuerKunde(null).contains(						"Keine Bestellung vorhanden"));		assertTrue(				"ArbeitenFuer ohne Kunde Lieferant: keine Bestellung vorhanden",				angestellte[1].arbeitetFuerKunde(null).contains(						"Keine Bestellung vorhanden"));	}	@Test	public void testKochArbeitenBestellungAufgegeben() throws KeinKundeException, KeineBestellungException, BestellungFalscherStatusException {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		kunde.setBestellung(myBestellung);		myBestellung.setStatus("aufgegeben");		assertTrue("Koch arbeitet: Bestellung fertig", angestellte[0]				.arbeitetFuerKunde(kunde).contains("Bestellung fertig"));		assertEquals("Bestellungsstatus nach Koch arbeitet", "fertig",				myBestellung.getStatus());	}	@Test(expected = BestellungFalscherStatusException.class)	public void testKochArbeitenBestellungFertig() throws KeinKundeException, KeineBestellungException, BestellungFalscherStatusException {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		kunde.setBestellung(myBestellung);		myBestellung.setStatus("fertig");		assertTrue(				"Koch arbeitet: Keine Bestellung zum Abarbeiten",				angestellte[0].arbeitetFuerKunde(kunde).contains(						"Keine Bestellung zum Abarbeiten"));		assertEquals("Bestellungsstatus immer noch fertig", "fertig",				myBestellung.getStatus());	}	@Test(expected = BestellungFalscherStatusException.class)	public void testKochArbeitenBestellungAusgeliefert() throws KeinKundeException, KeineBestellungException, BestellungFalscherStatusException {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		kunde.setBestellung(myBestellung);		myBestellung.setStatus("ausgeliefert");		assertTrue(				"Koch arbeitet: Keine Bestellung zum Abarbeiten",				angestellte[0].arbeitetFuerKunde(kunde).contains(						"Keine Bestellung zum Abarbeiten"));	}	@Test(expected = BestellungFalscherStatusException.class)	public void testLieferantArbeitenBestellungAufgegeben() throws KeinKundeException, KeineBestellungException, BestellungFalscherStatusException {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		kunde.setBestellung(myBestellung);		myBestellung.setStatus("aufgegeben");		assertTrue(				"Lieferant arbeitet:  Keine Bestellung zum Abarbeiten",				angestellte[1].arbeitetFuerKunde(kunde).contains(						"Keine Bestellung zum Abarbeiten"));		assertEquals("Bestellungsstatus immer noch aufgegeben", "aufgegeben",				myBestellung.getStatus());	}	@Test	public void testLieferantArbeitenBestellungFertig() throws KeinKundeException, KeineBestellungException, BestellungFalscherStatusException {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		kunde.setBestellung(myBestellung);		myBestellung.setStatus("fertig");	//	System.out.println(myBestellung.getZeitstempelAuslieferung());		assertTrue("Bestellung Zeitstempel Auslieferung vorher null",				myBestellung.getZeitstempelAuslieferung() == null);		assertTrue("Lieferant arbeitet: Bestellung fertig um", angestellte[1]				.arbeitetFuerKunde(kunde).contains("Bestellung fertig um"));		assertEquals("Bestellungsstatus ausgeliefert", "ausgeliefert",				myBestellung.getStatus());		assertTrue("Bestellung Zeitstempel Auslieferung vorhanden",				myBestellung.getZeitstempelAuslieferung() != null);	}	@Test(expected = BestellungFalscherStatusException.class)	public void testLieferantArbeitenBestellungAusgeliefert() throws KeinKundeException, KeineBestellungException, BestellungFalscherStatusException {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		kunde.setBestellung(myBestellung);		myBestellung.setStatus("ausgeliefert");		assertTrue(				"Lieferant arbeitet: Keine Bestellung zum Abarbeiten",				angestellte[1].arbeitetFuerKunde(kunde).contains(						"Keine Bestellung zum Abarbeiten"));	}}